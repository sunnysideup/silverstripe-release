#!/bin/bash

# Function to display help message
display_help() {
    rm release-running -f
    echo
    echo "Usage: vendor/bin/sake-release [branch...]" >&2
    echo
    echo "   -a                Create a backup, default is NO"
    echo "   -e                Environment type, overrule type set in .env file."
    echo "   -w                Run as www-data (or another user), default is not to do this"
    echo "                     If set to yes, it will run as www-data, however you can also specify another user"
    echo "   -p                Set permissions (user set as www-data by default or another user set by -w)"
    echo "   -u                Run composer update rather than composer install"
    echo "   -d                For composer, do not use --no-dev, i.e. include dev packages"
    echo "   -h                Display this help message and exit"
    echo
    echo "Example (run from project root directory on the live server)"
    echo "It will make a backup and then release the latest version of the production branch"
    echo
    echo "   vendor/bin/sake-release -a"
    echo
    echo
    echo "Other examples:"

    echo " # release the develop branch locally"
    echo " # (-e dev is optional, it will check SS_ENVIRONMENT_TYPE in .env))"
    echo "   vendor/bin/sake-release develop -e dev     "
    echo ""

    echo " # release the my-feature-branch branch"
    echo "   vendor/bin/sake-release my-feature-branch"
    echo ""

    echo " # release the development branch, set permissions (www-data), run composer update"
    echo "   vendor/bin/sake-release -p -u"
    echo ""

    echo " # make a backup, release feature/awesome, run as www-data"
    echo "   vendor/bin/sake-release live feature/awesome -a -w www-data"

    echo
    echo
    exit 1
}

# Function to display a warning
warn_unexpected_value() {
    echo "Warning: The flag $1 does not require a value. Ignoring provided value '$2'."
    exit 1
}

# Check if release is already running
if [ -f "release-running" ]; then
    echo "Going to sleep for 5 minutes as there is already a release running.  "
    echo "To start again, you can press CTRL+C and then delete the release-running file (rm release-running)"
    echo "After that, you can start the release again."
    sleep 300
    echo "Waking up!"
fi

# Set to running
touch release-running
touch release.log

echo ''
echo '-----------------------------'
echo '-----------------------------'
echo '-----------------------------'
echo ''

# get data from .env
source ./.env

# Initialize variables
branch_name=""
wwwDataUser=""
backup=false
setPermissions=false
composerUpdate=false
includeDevPackages=false
otherOptions=()

# Loop through all arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
    -w)
        wwwDataUser="$2"
        if id "$2" &>/dev/null; then
            wwwDataUser=$2
        else
            wwwDataUser="www-data"
        fi
        shift # Remove argument name
        shift # Remove argument value
        echo "Run as $wwwDataUser"
        ;;
    -e)
        SS_ENVIRONMENT_TYPE="$2"
        shift # Remove argument name
        shift # Remove argument value
        echo "Environment Type set to: $SS_ENVIRONMENT_TYPE"
        ;;
    -a)
        if [[ -n $2 && ${2:0:1} != "-" ]]; then
            warn_unexpected_value "-a" "$2"
            shift # Remove unexpected value
        fi
        backup=true
        shift # Remove argument name
        echo "Make a backup first"
        ;;
    -p)
        if [[ -n $2 && ${2:0:1} != "-" ]]; then
            warn_unexpected_value "-p" "$2"
            shift # Remove unexpected value
        fi
        setPermissions=true
        if [ -z "$wwwDataUser" ]; then
            wwwDataUser="www-data"
        fi
        shift # Remove argument name
        ;;
    -d)
        if [[ -n $2 && ${2:0:1} != "-" ]]; then
            warn_unexpected_value "-p" "$2"
            shift # Remove unexpected value
        fi
        includeDevPackages=true
        shift # Remove argument name
        ;;
    -u)
        if [[ -n $2 && ${2:0:1} != "-" ]]; then
            warn_unexpected_value "-u" "$2"
            shift # Remove unexpected value
        fi
        composerUpdate=true
        shift # Remove argument name
        ;;
    -h)
        display_help
        ;;
    *)                       # Handle positional arguments
        otherOptions+=("$1") # Save positional arg
        shift                # Remove argument
        ;;
    esac
done

# Now, process the positional arguments
# Assuming the first positional argument is the branch name
if [ ${#otherOptions[@]} -gt 0 ]; then
    branch_name=${otherOptions[0]}
fi

if [ "$branch_name" == "live" ]; then
    branch_name="production"
    SS_ENVIRONMENT_TYPE="live"
elif [ "$branch_name" == "test" ]; then
    branch_name="test"
    SS_ENVIRONMENT_TYPE="test"
elif [ "$branch_name" == "staging" ]; then
    branch_name="staging"
    SS_ENVIRONMENT_TYPE="test"
elif [ "$branch_name" == "dev" ]; then
    branch_name="develop"
    SS_ENVIRONMENT_TYPE="dev"
fi

# Determine git branch based on environment if not provided
if [ -z "$branch_name" ]; then
    if [ -z "$RELEASE_BRANCH" ]; then
        if [ "$SS_ENVIRONMENT_TYPE" == "live" ]; then
            branch_name="production"
        elif [ "$SS_ENVIRONMENT_TYPE" == "dev" ] || [ "$SS_ENVIRONMENT_TYPE" == "test" ]; then
            branch_name="develop"
        fi
    else
        branch_name="$RELEASE_BRANCH"
    fi
fi

# check if branch exists
if git show-ref --verify --quiet refs/heads/$branch_name; then
    echo "Branch '$branch_name' exists."
else
    echo "Branch '$branch_name' does not exist."
    git fetch --all
    exit 1
fi

# Test env type: dev / test / live
if [ "$SS_ENVIRONMENT_TYPE" == "dev" ]; then
    echo "DEV environment"
elif [ "$SS_ENVIRONMENT_TYPE" == "test" ]; then
    echo "TEST environment"
elif [ "$SS_ENVIRONMENT_TYPE" == "live" ]; then
    echo "LIVE environment"
else
    echo "Invalid argument. "
    echo "... Please specify 'dev', 'test',  or 'live' using the -e flag "
    echo "... or make sure it is set in the env file (SS_ENVIRONMENT_TYPE)"
    rm release-running -f
    exit 1
fi
echo ''
echo '-----------------------------'
echo '-----------------------------'
echo '-----------------------------'
echo ''

# Optional backup
if [[ $backup == true ]]; then

    # create backup dir with _manifest_exclude
    mkdir -p ./__backups
    cd ./__backups
    touch _manifest_exclude

    # remove any files left from last time
    rm ssbak -f
    rm ssbak_linux_amd64.tar.gz -f
    rm LICENSE -f
    rm README.md -f
    rm ./backup.sspak -f

    # download latest
    wget -q https://github.com/axllent/ssbak/releases/latest/download/ssbak_linux_amd64.tar.gz

    # install
    tar zxvf ssbak_linux_amd64.tar.gz
    chmod +x ./ssbak

    # backup
    ./ssbak save .. ./backup.sspak

    # cleanup
    rm ssbak -f
    rm ssbak_linux_amd64.tar.gz -f
    rm LICENSE -f
    rm README.md -f

    # go back to previous dir
    cd ../
fi

# note release data in release.log
echo "=========================" >>release.log
echo "Time: $(date). START UPDATE: " >>release.log
echo "=========================" >>release.log

# Log the branch name
echo "Branch: $(git rev-parse --abbrev-ref HEAD)" >>release.log

# Log the latest commit hash and message
echo "Commit: $(git log -1 --format='%H')" >>release.log
echo "Message: $(git log -1 --format='%s')" >>release.log

# Log the author and date of the latest commit
echo "Author: $(git log -1 --format='%an')" >>release.log
echo "Date: $(git log -1 --format='%ad')" >>release.log

# Also log the output of git describe for additional info
git describe --all --long >>release.log

# get git
git checkout $branch_name
# Git actions with chosen branch
git pull origin $branch_name

# run composer
if [ "$SS_ENVIRONMENT_TYPE" == "dev" ]; then
    if [ "$composerUpdate" == true ]; then
        composer update --prefer-source
    else
        composer install --prefer-source
    fi
else
    if [ "$includeDevPackages" == true ]; then
        composer install --prefer-dist
    else
        composer install --prefer-dist --no-dev
    fi
fi

# set permissions
if [ "$setPermissions" == true ]; then

    # remove obsolete folders
    sudo rm .graphql/ -rf

    # create necessary folders
    sudo mkdir -p ./public
    sudo mkdir -p ./public/assets
    sudo mkdir -p ./.graphql-generated
    sudo mkdir -p ./public/_graphql

    # root folder is accessible
    sudo chmod 0755 .
    sudo chmod 0755 themes
    sudo chmod 0755 public

    # we keep all the sudos together...
    # cleanup ownership
    sudo chown $(whoami):$wwwDataUser . -R

    sudo chown $wwwDataUser ./public/assets -R
    sudo chown $wwwDataUser ./.graphql-generated -R
    sudo chown $wwwDataUser ./public/_graphql -R
    # files ...
    if [ -f ./public/admin.types.graphql ]; then
        sudo chown $wwwDataUser ./public/admin.types.graphql
    fi

fi

# run /dev/build
if [ -n "$wwwDataUser" ]; then
    sudo -u $wwwDataUser vendor/bin/sake dev/build flush=all
else
    vendor/bin/sake dev/build flush=all
fi

# Only run the following commands if the argument is not "dev"

if [ "$SS_ENVIRONMENT_TYPE" != "dev" ]; then
    # build

    # record new version
    git describe --all --long >>release.log

    echo "=========================" >>release.log
    echo "BRANCH: $branch_name" >>release.log
    echo "=========================" >>release.log
    echo "DONE" >>release.log
    echo "=========================" >>release.log
    echo "" >>release.log
    echo "" >>release.log

    ##########################################
    # Ping Release if FIA_RELEASE_PING_URL is set
    ##########################################

    if [ -n "$FIA_RELEASE_PING_URL" ]; then
        GIT_HASH=$(git rev-parse HEAD)
        URL_WITH_HASH="${FIA_RELEASE_PING_URL}${GIT_HASH}"
        wget -S -qO- "${URL_WITH_HASH}"
    fi

    ###############################
    # FIX FRONT-END
    ###############################
    if [ "$SS_RELEASE_FRONT_END" != "false" ] || [ "$SS_RELEASE_FRONT_END" != "false" ]; then
        if [ "$SS_ENVIRONMENT_TYPE" == "test" ]; then
            sed -i 's/SS_ENVIRONMENT_TYPE="test"/SS_ENVIRONMENT_TYPE="dev"/g' $FILE_PATH
        elif [ "$SS_ENVIRONMENT_TYPE" == "live" ]; then
            sed -i 's/SS_ENVIRONMENT_TYPE="live"/SS_ENVIRONMENT_TYPE="dev"/g' $FILE_PATH
        fi

        FILE_PATH="./.env"
        BASE_URL=$(grep -oP 'SS_BASE_URL="\K[^"]+' $FILE_PATH)
        # Remove any trailing slash
        BASE_URL="${BASE_URL%/}"
        NEW_URL="${BASE_URL}/dev/?flush=all"
        wget -O - $NEW_URL

        # Switch SS_ENVIRONMENT_TYPE back to its original value
        if [ "$SS_ENVIRONMENT_TYPE" == "test" ]; then
            sed -i 's/SS_ENVIRONMENT_TYPE="dev"/SS_ENVIRONMENT_TYPE="test"/g' $FILE_PATH
        elif [ "$SS_ENVIRONMENT_TYPE" == "live" ]; then
            sed -i 's/SS_ENVIRONMENT_TYPE="dev"/SS_ENVIRONMENT_TYPE="live"/g' $FILE_PATH
        fi
    fi
fi

# set CSP headers - if any
if [ -d "./vendor/firesphere/cspheaders" ]; then
    vendor/bin/sake dev/tasks/Firesphere-CSPHeaders-Tasks-SRIRefreshTask
fi

# delete cached files - we do this last. Not sure if this is right.
if [[ -n "$TEMP_PATH" && -d "$TEMP_PATH" ]]; then
    # Delete all files in TEMP_PATH
    echo ""
    echo "Deleting all files in TEMP_PATH: $TEMP_PATH"
    echo ""
    rm -rf "${TEMP_PATH:?}"/*
fi

echo "=========================" >>release.log
echo "Time: $(date). END UPDATE: " >>release.log
echo "=========================" >>release.log

# Log the branch name
echo "Branch: $(git rev-parse --abbrev-ref HEAD)" >>release.log

# Log the latest commit hash and message
echo "Commit: $(git log -1 --format='%H')" >>release.log
echo "Message: $(git log -1 --format='%s')" >>release.log

# Log the author and date of the latest commit
echo "Author: $(git log -1 --format='%an')" >>release.log
echo "Date: $(git log -1 --format='%ad')" >>release.log

# Also log the output of git describe for additional info
git describe --all --long >>release.log

echo ""
echo "DONE"
echo ""

rm release-running -f

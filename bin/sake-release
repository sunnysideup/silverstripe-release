#!/bin/bash

# Display help
display_help() {
    cat <<EOF
Usage:
  vendor/bin/sake-release [branch...]

What it does:
    Runs a git pull, composer update, dev/build and optionally backups the site.
    If installed, it will also run vendor/bin/sake dev/tasks/Firesphere-CSPHeaders-Tasks-SRIRefreshTask
    If the environment is not 'dev', it will also flush the front-end (apache cache).

.env variables used:
    SS_ENVIRONMENT_TYPE
    SS_RELEASE_FRONT_END (set to false to skip front-end flush)
    SS_BASE_URL (for front-end flush)

    FIA_RELEASE_PING_URL (optional, url to ping after release)
    SS_RELEASE_BRANCH (optional)
    TEMP_PATH (optional, to clean up)
    SS_IMPORT_SSPAK_EVERY_TIME (optional, set to a file name to import sspak every time)

Options:
   -a    Backup (default: no)
   -o    Backup only (default: no)
   -e    Override environment type set in .env
   -i    Import an sspak file (default: no import)
   -w    Run as specified user (default: no, set to a user like www-data)
   -p    Set permissions (user default: www-data)
   -u    Composer update instead of install
   -d    Include dev packages
   -h    Show this help

Examples:
   # Backup & release
   vendor/bin/sake-release -a

   # release of 'develop' branch
   vendor/bin/sake-release develop

   # Release, set permissions, update composer
   vendor/bin/sake-release -p -u

   # Release, with new data
   vendor/bin/sake-release -i new-data.sspak
EOF
    exit 1
}

recordcommit() {
    {
        echo "========================="
        echo $1
        echo "========================="
        echo "Time: $(date). START UPDATE:"
        echo "Branch: $(git rev-parse --abbrev-ref HEAD)"
        git log -1 --format="Commit: %H%nMessage: %s%nAuthor: %an%nDate: %ad"
        git describe --all --long
    } >>release.log
}

source ./.env # Load environment variables

# Default variables
branch_name=""
backup=false
backupOnly=false
setPermissions=false
composerUpdate=false
includeDevPackages=false
otherOptions=()
wwwDataUser=""
import=false
if [ -n "$FIA_RELEASE_PING_URL" ]; then
    echo "Importing sspak file $SS_IMPORT_SSPAK_EVERY_TIME"
    import=true
fi
# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
    -w)
        wwwDataUser=${2:-"www-data"}
        shift 2
        ;;
    -e)
        SS_ENVIRONMENT_TYPE="$2"
        shift 2
        ;;
    -i)
        SS_IMPORT_SSPAK_EVERY_TIME="$2"
        import=true
        shift 2
        ;;
    -a)
        backup=true
        shift
        ;;
    -o)
        backup=true
        backupOnly=true
        shift
        ;;
    -p)
        setPermissions=true
        wwwDataUser=${wwwDataUser:-"www-data"}
        shift
        ;;
    -d)
        includeDevPackages=true
        shift
        ;;
    -u)
        composerUpdate=true
        shift
        ;;
    -h) display_help ;;
    *)
        otherOptions+=("$1")
        shift
        ;;
    esac
done

# If release is running, wait
if [ -f "release-running" ]; then
    echo "Release in progress, sleeping 5 minutes (CTRL+C to interrupt)"
    sleep 300
    echo "Resuming"
fi

# Start release
touch release-running release.log

branch_name=${otherOptions[0]:-${SS_RELEASE_BRANCH:-$SS_ENVIRONMENT_TYPE}}

# Set default branches based on alias
# staging is included to show it is part of the deal.
case "$branch_name" in
live)
    branch_name="production"
    SS_ENVIRONMENT_TYPE="live"
    ;;
staging)
    branch_name="staging"
    SS_ENVIRONMENT_TYPE="test"
    ;;
test)
    branch_name="test"
    SS_ENVIRONMENT_TYPE="test"
    ;;
dev)
    branch_name="develop"
    SS_ENVIRONMENT_TYPE="test" # this is the develop on the server - so we set it to test!
    ;;
local)
    branch_name="develop"
    SS_ENVIRONMENT_TYPE="dev" # this is the develop on the server - so we set it to test!
    ;;
esac

recordcommit "Starting release of $branch_name"

# Optional backup
if $backup; then
    mkdir -p ./__backups && cd ./__backups
    wget -q https://github.com/axllent/ssbak/releases/latest/download/ssbak_linux_amd64.tar.gz
    tar zxvf ssbak_linux_amd64.tar.gz && chmod +x ./ssbak
    ./ssbak save .. ./backup.sspak
    rm -f ssbak ssbak_linux_amd64.tar.gz LICENSE README.md
    cd ../
    if $backupOnly; then
        echo "Backup complete, please check ./__backups/backup.sspak"
        exit 0
    fi
fi
# Optional import
if $import; then
    mkdir -p ./__backups && cd ./__backups
    wget -q https://github.com/axllent/ssbak/releases/latest/download/ssbak_linux_amd64.tar.gz
    tar zxvf ssbak_linux_amd64.tar.gz && chmod +x ./ssbak
    cd ..
    __backups/ssbak load $SS_IMPORT_SSPAK_EVERY_TIME .
    rm -f ssbak ssbak_linux_amd64.tar.gz LICENSE README.md
    exit 0
fi

# Ensure branch exists
if ! git show-ref --verify --quiet refs/heads/$branch_name; then
    echo "Branch '$branch_name' not found. Fetching..."
    git fetch --all || exit 1
else # Ensure branch is up-to-date
    echo "Fetching latest changes for '$branch_name'..."
    git fetch origin $branch_name
fi

echo "${SS_ENVIRONMENT_TYPE^^} environment"

# Git and Composer operations
git checkout "$branch_name" && git pull origin "$branch_name"

if [ "$SS_ENVIRONMENT_TYPE" == "dev" ]; then
    composer ${composerUpdate:+update} --prefer-source
else
    composer install --prefer-dist ${includeDevPackages:+} --no-dev
fi

# Set permissions if needed
if $setPermissions; then
    sudo mkdir -p public/assets .graphql-generated public/_graphql
    sudo chown -R "$(whoami):$wwwDataUser" .
    sudo chown -R $wwwDataUser public/assets .graphql-generated public/_graphql
    [ -f public/admin.types.graphql ] && sudo chown $wwwDataUser public/admin.types.graphql
fi

# Run SilverStripe dev/build
if [ -n "$wwwDataUser" ]; then
    sudo -u "$wwwDataUser" vendor/bin/sake dev/build flush=all
else
    vendor/bin/sake dev/build flush=all
fi

if [ "$SS_ENVIRONMENT_TYPE" != "dev" ]; then
    # build
    if [ "$SS_RELEASE_FRONT_END" != "false" ]; then
        FILE_PATH="./.env"
        BASE_URL=$(grep -oP 'SS_BASE_URL="\K[^"]+' $FILE_PATH)
        # Check if BASE_URL was successfully set
        if [ -z "$BASE_URL" ]; then
            echo "Error: SS_BASE_URL is not set in $FILE_PATH. Exiting."
            exit 1
        fi
        # Remove any trailing slash
        BASE_URL="${BASE_URL%/}"
        NEW_URL="${BASE_URL}/dev/?flush=all"

        if [ "$SS_ENVIRONMENT_TYPE" == "test" ]; then
            sed -i 's/SS_ENVIRONMENT_TYPE="test"/SS_ENVIRONMENT_TYPE="dev"/g' $FILE_PATH
        elif [ "$SS_ENVIRONMENT_TYPE" == "live" ]; then
            sed -i 's/SS_ENVIRONMENT_TYPE="live"/SS_ENVIRONMENT_TYPE="dev"/g' $FILE_PATH
        fi

        wget -O - $NEW_URL

        # Switch SS_ENVIRONMENT_TYPE back to its original value
        if [ "$SS_ENVIRONMENT_TYPE" == "test" ]; then
            sed -i 's/SS_ENVIRONMENT_TYPE="dev"/SS_ENVIRONMENT_TYPE="test"/g' $FILE_PATH
        elif [ "$SS_ENVIRONMENT_TYPE" == "live" ]; then
            sed -i 's/SS_ENVIRONMENT_TYPE="dev"/SS_ENVIRONMENT_TYPE="live"/g' $FILE_PATH
        fi
    fi
fi

# Ping release URL if set
[ -n "$FIA_RELEASE_PING_URL" ] && wget -S -qO- "${FIA_RELEASE_PING_URL}$(git rev-parse HEAD)"

# Finalize release
if [ -d "./vendor/firesphere/cspheaders" ]; then
    vendor/bin/sake dev/tasks/Firesphere-CSPHeaders-Tasks-SRIRefreshTask
fi

[ -d "$TEMP_PATH" ] && rm -rf "${TEMP_PATH:?}/*"

recordcommit "Finished release of $branch_name"

rm -f release-running
